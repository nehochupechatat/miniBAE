BUILD_DIR	:= build/
TARGET_OUT	:= bin/
TARGET_LIB	:= libminiBAE
TARGET_BIN	:= playbae.js
PACK_FILENAME	:= playbae_wasm32.tar.gz

vpath	%.c src/BAE_Source/Common src/BAE_Source/Platform
vpath	%.c src/banks/patches
vpath	%.c src/playbae
vpath	%.c src/BAE_MPEG_Source_II

INC_PATH	:= -Isrc/BAE_Source/Common
INC_PATH	+= -Isrc/BAE_Source/Platform
INC_PATH	+= -Isrc/BAE_MPEG_Source_II
INC_PATH	+= -Isrc/banks/patches

EXTRA_FILES		:= \
			src/playbae/minibae-audio.htm \
			src/playbae/minibae-audio.js


SRC		:=	BAE_API_Ansi.c

SRC		+= \
			DriverTools.c \
			GenAudioStreams.c \
			GenCache.c \
			GenChorus.c \
			GenFiltersReverbU3232.c \
			GenInterp2ReverbU3232.c \
			GenOutput.c \
			GenPatch.c \
			GenReverb.c \
			GenReverbNew.c \
			GenSample.c \
			GenSeq.c \
			GenSeqTools.c \
			GenSetup.c \
			GenSong.c \
			GenSoundFiles.c \
			GenSynth.c \
			GenSynthFiltersSimple.c \
			GenSynthFiltersU3232.c \
			GenSynthInterp2Simple.c \
			GenSynthInterp2U3232.c \
			MiniBAE.c \
			NewNewLZSS.c \
			SampleTools.c \
			X_API.c \
			X_Decompress.c \
			X_IMA.c \
			g711.c \
			g721.c \
			g723_24.c \
			g723_40.c \
			g72x.c \
			BAEPatches.c

#SRC		+= 	\
#			XMPEGFilesSun.c \
#			XMPEG_BAE_API.c \
#			mpa_c_copybytes.c \
#			mpa_conv.c \
#			mpa_dec.c \
#			mpa_dec_bits.c \
#			mpa_dec_crc.c \
#			mpa_dec_l1.c \
#			mpa_dec_l12.c \
#			mpa_dec_l2.c \
#			mpa_dec_l3.c \
#			mpa_dec_l3hf.c \
#			mpa_dec_l3u.c \
#			mpa_dec_poly.c \
#			mpa_dec_tab.c \
#			mpa_dec_vec.c \
#			mpa_version.c

SRC_BIN         := $(SRC) playbae.c

OBJ_DIR         := $(BUILD_DIR)obj/
OBJ             := $(addprefix $(OBJ_DIR),$(addsuffix .o,$(basename ${SRC})))
OBJ_BIN         := $(addprefix $(OBJ_DIR),$(addsuffix .o,$(basename ${SRC_BIN})))

ARCH		:= -m32 -static
CC		:= emcc
CXX		:= emcc
LD		:= emcc
AR      	:= emar
STRIP		:= strip

CFLAGS  	:= $(ARCH) -fPIC -g -O2 $(INC_PATH) -D_THREAD_SAFE -Wno-pragma-pack -Wno-unused-value
CFLAGS		+= -DX_PLATFORM=X_ANSI
#CFLAGS		+= -D_DEBUG=1
CXXFLAGS 	:= $(CFLAGS)
LDFLAGS		:= $(ARCH) -s 'DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=[$$Browser]' -s EXPORT_ES6=1 -s EXPORTED_RUNTIME_METHODS=[FS] -s SINGLE_FILE=1


LIBS	= 	-lpthread

all: $(TARGET_LIB).a ${TARGET_LIB}.js $(TARGET_BIN)

$(TARGET_LIB).a: $(OBJ)
	@mkdir -p $(TARGET_OUT)
	$(AR) rcs $(TARGET_OUT)$(TARGET_LIB).a $(OBJ)

$(TARGET_LIB).js: ${OBJ}
	@mkdir -p $(TARGET_OUT)
	${LD} -shared ${ARCH} ${LDFLAGS} ${OBJ} $(LIBS) -o $(TARGET_OUT)${TARGET_LIB}.so

$(TARGET_BIN): ${OBJ_BIN}
	@mkdir -p $(TARGET_OUT)
	@cp $(EXTRA_FILES) $(TARGET_OUT)
	${LD} -s -o $(TARGET_OUT)${TARGET_BIN} ${LDFLAGS} ${OBJ_BIN} ${LIBS}

pack: ${TARGET_BIN}
	@rm -f $(TARGET_OUT)$(PACK_FILENAME)
	@tar -zcf $(PACK_FILENAME) -C $(TARGET_OUT) --exclude "./$(PACK_FILENAME)" .
	@mv $(PACK_FILENAME) $(TARGET_OUT)$(PACK_FILENAME)

$(DST_FILES): ${TARGET_OUT}/% : %
	@echo "$< ==> $@"
	@[ -e $< ] || (echo "unspecified error copying $<" && false)
	@mkdir -p $(dir $@)
	@cp  $< $@

# Rules for compiling source files to object files
$(OBJ_DIR)%.o : %.cpp
	@echo @compile $<
	@mkdir -p $(OBJ_DIR)
	@${CXX} -c ${CXXFLAGS} $< -o $@

$(OBJ_DIR)%.o : %.c
	@echo @compile $<
	@mkdir -p $(OBJ_DIR)
	@${CC} -c ${CFLAGS} $< -o $@

clean:
	@rm -rdf $(TARGET_OUT)
	@rm -rdf $(OBJ_DIR)
	@rm -rdf $(BUILD_DIR)
	@rm -rdf $(TEST_OUT_DIR)
	@echo Cleaned!

